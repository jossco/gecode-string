%% Minizinc model for example4.txt
%% Automatically generated by kaluzish
%% Requires MiniZinc version >= 1.6
include "gecode-string-pad.mzn";
include "gecode-string-ascii.mzn";
        
int: wordlen;
set of int: widx = 1..wordlen;

var 0..wordlen: len_P1_1; array[widx] of var symbols: P1_1;
constraint str_pad(P1_1, len_P1_1);
var 0..wordlen: len_M1_1; array[widx] of var symbols: M1_1;
constraint str_pad(M1_1, len_M1_1);
var 0..wordlen: len_var_0xINPUT_2; array[widx] of var symbols: var_0xINPUT_2;
constraint str_pad(var_0xINPUT_2, len_var_0xINPUT_2);
var 0..wordlen: len_P0_1; array[widx] of var symbols: P0_1;
constraint str_pad(P0_1, len_P0_1);
var 0..wordlen: len_T2_1; array[widx] of var symbols: T2_1;
constraint str_pad(T2_1, len_T2_1);
var 0..wordlen: len_T1_1; array[widx] of var symbols: T1_1;
constraint str_pad(T1_1, len_T1_1);
var bool: T_4;
var bool: T_3;
var 0..wordlen: len_T_2; array[widx] of var symbols: T_2;
constraint str_pad(T_2, len_T_2);
var 0..wordlen: len_T0_1; array[widx] of var symbols: T0_1;
constraint str_pad(T0_1, len_T0_1);
var 0..wordlen: len_M0_1; array[widx] of var symbols: M0_1;
constraint str_pad(M0_1, len_M0_1);
var 0..wordlen: len_PCTEMP_LHS_1_idx_0; array[widx] of var symbols: PCTEMP_LHS_1_idx_0;
constraint str_pad(PCTEMP_LHS_1_idx_0, len_PCTEMP_LHS_1_idx_0);
var 0..wordlen: len_PCTEMP_LHS_1_idx_1; array[widx] of var symbols: PCTEMP_LHS_1_idx_1;
constraint str_pad(PCTEMP_LHS_1_idx_1, len_PCTEMP_LHS_1_idx_1);
var 0..wordlen: len_PCTEMP_LHS_1_idx_2; array[widx] of var symbols: PCTEMP_LHS_1_idx_2;
constraint str_pad(PCTEMP_LHS_1_idx_2, len_PCTEMP_LHS_1_idx_2);

%% DFAs
% \notin /=/
int: MZN_DFA_1_Q = 2;
int: MZN_DFA_1_q0 = 1; set of int: MZN_DFA_1_F = { 1 };
array[1..MZN_DFA_1_Q,1..max_symbol] of int: MZN_DFA_1_d = [|
  % State 1
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1|
  % State 2
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2|];
%%% constant strings
% MZN_CONST_STR_2 = 'Hello'
array[1..6] of symbols: MZN_CONST_STR_2 = [41, 70, 77, 77, 80, 96];
int: len_MZN_CONST_STR_2 = 5;
% MZN_CONST_STR_1 = '='
array[1..2] of symbols: MZN_CONST_STR_1 = [30, 96];
int: len_MZN_CONST_STR_1 = 1;

constraint str_equal(T2_1, len_T2_1, PCTEMP_LHS_1_idx_2, len_PCTEMP_LHS_1_idx_2);
constraint str_equal(T0_1, len_T0_1, var_0xINPUT_2, len_var_0xINPUT_2);
constraint str_equal(M1_1, len_M1_1, MZN_CONST_STR_1, len_MZN_CONST_STR_1);
constraint str_regular(PCTEMP_LHS_1_idx_1, len_PCTEMP_LHS_1_idx_1, MZN_DFA_1_Q, max_symbol, MZN_DFA_1_d, MZN_DFA_1_q0, MZN_DFA_1_F);
constraint str_concat(PCTEMP_LHS_1_idx_1, len_PCTEMP_LHS_1_idx_1, M1_1,  len_M1_1, P1_1, len_P1_1 );
constraint str_concat(P1_1, len_P1_1, T2_1,  len_T2_1, T1_1, len_T1_1 );
constraint str_equal(M0_1, len_M0_1, MZN_CONST_STR_1, len_MZN_CONST_STR_1);
constraint str_regular(PCTEMP_LHS_1_idx_0, len_PCTEMP_LHS_1_idx_0, MZN_DFA_1_Q, max_symbol, MZN_DFA_1_d, MZN_DFA_1_q0, MZN_DFA_1_F);
constraint str_concat(PCTEMP_LHS_1_idx_0, len_PCTEMP_LHS_1_idx_0, M0_1,  len_M0_1, P0_1, len_P0_1 );
constraint str_concat(P0_1, len_P0_1, T1_1,  len_T1_1, T0_1, len_T0_1 );
constraint str_equal(T_2, len_T_2, PCTEMP_LHS_1_idx_0, len_PCTEMP_LHS_1_idx_0);
constraint T_3 <-> str_nequal(T_2, len_T_2, MZN_CONST_STR_2, len_MZN_CONST_STR_2);
constraint T_4 == not T_3;
constraint T_4 == true;

solve satisfy;

output ["var_0xINPUT_2=\""] ++ [ascii[fix(var_0xINPUT_2[i])] | i in 1..fix(len_var_0xINPUT_2)] ++ ["\"\n"];
        