%% Minizinc model for example5.txt
%% Automatically generated by kaluzish
%% Requires MiniZinc version >= 1.6
include "gecode-string-pad.mzn";
include "gecode-string-ascii.mzn";
        
int: wordlen;
set of int: widx = 1..wordlen;

var 0..wordlen: len_T3_1; array[widx] of var symbols: T3_1;
constraint str_pad(T3_1, len_T3_1);
var 0..wordlen: len_var_0xINPUT_2; array[widx] of var symbols: var_0xINPUT_2;
constraint str_pad(var_0xINPUT_2, len_var_0xINPUT_2);
var 0..wordlen: len_T2_1; array[widx] of var symbols: T2_1;
constraint str_pad(T2_1, len_T2_1);
var int: I0_1;
var int: I1_1;
var bool: T_2;
var int: I2_1;
var 0..wordlen: len_T1_1; array[widx] of var symbols: T1_1;
constraint str_pad(T1_1, len_T1_1);
var 0..wordlen: len_PCTEMP_LHS_1; array[widx] of var symbols: PCTEMP_LHS_1;
constraint str_pad(PCTEMP_LHS_1, len_PCTEMP_LHS_1);

%%% constant strings
% MZN_CONST_STR_1 = 'hello'
array[1..6] of symbols: MZN_CONST_STR_1 = [73, 70, 77, 77, 80, 96];
int: len_MZN_CONST_STR_1 = 5;

constraint I0_1 = (5 - 0);
constraint 0 >= 0;
constraint 5 >= 0;
constraint 5 <= I1_1;
constraint I2_1 == I1_1;
constraint I0_1 == len_PCTEMP_LHS_1;
constraint str_concat(T1_1, len_T1_1, T2_1,  len_T2_1, var_0xINPUT_2, len_var_0xINPUT_2 );
constraint str_concat(PCTEMP_LHS_1, len_PCTEMP_LHS_1, T3_1,  len_T3_1, T2_1, len_T2_1 );
constraint 0 == len_T1_1;
constraint I1_1 == len_var_0xINPUT_2;
constraint T_2 <-> str_nequal(PCTEMP_LHS_1, len_PCTEMP_LHS_1, MZN_CONST_STR_1, len_MZN_CONST_STR_1);
constraint T_2 == true;

solve satisfy;

output ["var_0xINPUT_2=\""] ++ [ascii[fix(var_0xINPUT_2[i])] | i in 1..fix(len_var_0xINPUT_2)] ++ ["\"\n"];
        
