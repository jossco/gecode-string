%% Minizinc model for example6.txt
%% Automatically generated by kaluzish
%% Requires MiniZinc version >= 1.6
include "gecode-string-pad.mzn";
include "gecode-string-ascii.mzn";
        
int: wordlen;
set of int: widx = 1..wordlen;

var 0..wordlen: len_var_0xINPUT_2; array[widx] of var symbols: var_0xINPUT_2;
constraint str_pad(var_0xINPUT_2, len_var_0xINPUT_2);
var bool: T_3;
var int: PCTEMP_LHS_2;
var 0..wordlen: len_PCTEMP_LHS_1; array[widx] of var symbols: PCTEMP_LHS_1;
constraint str_pad(PCTEMP_LHS_1, len_PCTEMP_LHS_1);
var 0..wordlen: len_MZN_GEN_2; array[widx] of var symbols: MZN_GEN_2;
constraint str_pad(MZN_GEN_2, len_MZN_GEN_2);
var 0..wordlen: len_MZN_GEN_3; array[widx] of var symbols: MZN_GEN_3;
constraint str_pad(MZN_GEN_3, len_MZN_GEN_3);
var 0..wordlen: len_MZN_GEN_1; array[widx] of var symbols: MZN_GEN_1;
constraint str_pad(MZN_GEN_1, len_MZN_GEN_1);
var 0..wordlen: len_MZN_GEN_6; array[widx] of var symbols: MZN_GEN_6;
constraint str_pad(MZN_GEN_6, len_MZN_GEN_6);
var 0..wordlen: len_MZN_GEN_4; array[widx] of var symbols: MZN_GEN_4;
constraint str_pad(MZN_GEN_4, len_MZN_GEN_4);
var 0..wordlen: len_MZN_GEN_5; array[widx] of var symbols: MZN_GEN_5;
constraint str_pad(MZN_GEN_5, len_MZN_GEN_5);
var 0..wordlen: len_T3_2; array[widx] of var symbols: T3_2;
constraint str_pad(T3_2, len_T3_2);
var 0..wordlen: len_T0_1; array[widx] of var symbols: T0_1;
constraint str_pad(T0_1, len_T0_1);
var 0..wordlen: len_T0_2; array[widx] of var symbols: T0_2;
constraint str_pad(T0_2, len_T0_2);
var 0..wordlen: len_T4_2; array[widx] of var symbols: T4_2;
constraint str_pad(T4_2, len_T4_2);
var 0..wordlen: len_T1_1; array[widx] of var symbols: T1_1;
constraint str_pad(T1_1, len_T1_1);
var 0..wordlen: len_T1_2; array[widx] of var symbols: T1_2;
constraint str_pad(T1_2, len_T1_2);
var 0..wordlen: len_T4_1; array[widx] of var symbols: T4_1;
constraint str_pad(T4_1, len_T4_1);
var 0..wordlen: len_T3_1; array[widx] of var symbols: T3_1;
constraint str_pad(T3_1, len_T3_1);
var 0..wordlen: len_T2_2; array[widx] of var symbols: T2_2;
constraint str_pad(T2_2, len_T2_2);
var 0..wordlen: len_T2_1; array[widx] of var symbols: T2_1;
constraint str_pad(T2_1, len_T2_1);
var int: I0_2;
var bool: T_SELECT_1;
var 0..wordlen: len_T5_1; array[widx] of var symbols: T5_1;
constraint str_pad(T5_1, len_T5_1);
var 0..wordlen: len_T5_2; array[widx] of var symbols: T5_2;
constraint str_pad(T5_2, len_T5_2);

%% DFAs
% \notin /=/
int: MZN_DFA_1_Q = 2;
int: MZN_DFA_1_q0 = 1; set of int: MZN_DFA_1_F = { 1 };
array[1..MZN_DFA_1_Q,1..max_symbol] of int: MZN_DFA_1_d = [|
  % State 1
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1|
  % State 2
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2|];

% \notin /_/
int: MZN_DFA_2_Q = 2;
int: MZN_DFA_2_q0 = 1; set of int: MZN_DFA_2_F = { 1 };
array[1..MZN_DFA_2_Q,1..max_symbol] of int: MZN_DFA_2_d = [|
  % State 1
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1|
  % State 2
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2|];
%%% constant strings
% MZN_CONST_STR_2 = '='
array[1..2] of symbols: MZN_CONST_STR_2 = [30, 96];
int: len_MZN_CONST_STR_2 = 1;
% MZN_CONST_STR_1 = '_'
array[1..2] of symbols: MZN_CONST_STR_1 = [64, 96];
int: len_MZN_CONST_STR_1 = 1;

constraint str_concat(T0_1, len_T0_1, T1_1,  len_T1_1, var_0xINPUT_2, len_var_0xINPUT_2 );
constraint str_concat(T2_1, len_T2_1, T3_1,  len_T3_1, T1_1, len_T1_1 );
constraint str_regular(T0_1, len_T0_1, MZN_DFA_1_Q, max_symbol, MZN_DFA_1_d, MZN_DFA_1_q0, MZN_DFA_1_F);
constraint str_concat(T5_1, len_T5_1, T3_1,  len_T3_1, T4_1, len_T4_1 );
constraint str_concat(T0_1, len_T0_1, T4_1,  len_T4_1, PCTEMP_LHS_1, len_PCTEMP_LHS_1 );
constraint str_equal(T5_1, len_T5_1, MZN_CONST_STR_1, len_MZN_CONST_STR_1);
constraint str_equal(T2_1, len_T2_1, MZN_CONST_STR_2, len_MZN_CONST_STR_2);
constraint T_SELECT_1 <-> PCTEMP_LHS_2 != -1;
constraint str_concat(T0_2, len_T0_2, T1_2,  len_T1_2, PCTEMP_LHS_1, len_PCTEMP_LHS_1 );
constraint 0 == len_T0_2;
constraint str_regular(MZN_GEN_1, len_MZN_GEN_1, MZN_DFA_2_Q, max_symbol, MZN_DFA_2_d, MZN_DFA_2_q0, MZN_DFA_2_F);
constraint str_concat(MZN_GEN_3, len_MZN_GEN_3, MZN_GEN_4,  len_MZN_GEN_4, MZN_GEN_2, len_MZN_GEN_2 );
constraint str_concat(MZN_GEN_5, len_MZN_GEN_5, MZN_GEN_6,  len_MZN_GEN_6, MZN_GEN_3, len_MZN_GEN_3 );
constraint str_regular(MZN_GEN_5, len_MZN_GEN_5, MZN_DFA_2_Q, max_symbol, MZN_DFA_2_d, MZN_DFA_2_q0, MZN_DFA_2_F);
constraint T_SELECT_1 <-> (
  PCTEMP_LHS_2 = (I0_2 + 0)
  /\ I0_2 == len_T4_2
  /\ str_equal(MZN_GEN_2, len_MZN_GEN_2, T1_2, len_T1_2)
  /\ str_equal(MZN_GEN_3, len_MZN_GEN_3, T2_2, len_T2_2)
  /\ str_equal(MZN_GEN_4, len_MZN_GEN_4, T3_2, len_T3_2)
  /\ str_equal(MZN_GEN_5, len_MZN_GEN_5, T4_2, len_T4_2)
  /\ str_equal(MZN_GEN_6, len_MZN_GEN_6, T5_2, len_T5_2)
  /\ str_equal(T5_2, len_T5_2, MZN_CONST_STR_1, len_MZN_CONST_STR_1)
);
  constraint not T_SELECT_1 <-> (
  PCTEMP_LHS_2 == -1
  /\ str_equal(MZN_GEN_1, len_MZN_GEN_1, T1_2, len_T1_2)
);
constraint T_3 <-> PCTEMP_LHS_2 == 5;
constraint T_3 == true;

solve satisfy;

output ["var_0xINPUT_2=\""] ++ [ascii[fix(var_0xINPUT_2[i])] | i in 1..fix(len_var_0xINPUT_2)] ++ ["\"\n"];
        
